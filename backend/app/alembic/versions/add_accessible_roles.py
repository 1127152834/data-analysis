"""Change access_level to accessible_roles

Revision ID: add_accessible_roles
Create Date: 2023-11-05 00:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import mysql


# revision identifiers, used by Alembic.
revision = 'add_accessible_roles'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('database_connections', schema=None) as batch_op:
        batch_op.add_column(sa.Column('accessible_roles', sa.JSON(), nullable=True))
        # 将现有的access_level值转换为accessible_roles
        # 这需要根据实际情况调整，这里简单处理
        op.execute("""
            UPDATE database_connections 
            SET accessible_roles = JSON_ARRAY('admin', 'user') 
            WHERE access_level = 'admin';
            
            UPDATE database_connections 
            SET accessible_roles = JSON_ARRAY('admin') 
            WHERE access_level = 'user' OR access_level IS NULL;
        """)
        batch_op.drop_column('access_level')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('database_connections', schema=None) as batch_op:
        batch_op.add_column(sa.Column('access_level', sa.String(length=20), nullable=True))
        # 将accessible_roles转换回access_level
        # 简单处理: 如果包含'user'则为'admin'，否则为'user'
        op.execute("""
            UPDATE database_connections 
            SET access_level = 'admin' 
            WHERE JSON_CONTAINS(accessible_roles, '"user"');
            
            UPDATE database_connections 
            SET access_level = 'user' 
            WHERE NOT JSON_CONTAINS(accessible_roles, '"user"');
        """)
        batch_op.drop_column('accessible_roles')
    # ### end Alembic commands ### 